/*
 * generated by Xtext
 */
grammar InternalPlantExt;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.plantext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.plantext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.plantext.services.PlantExtGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private PlantExtGrammarAccess grammarAccess;
 	
    public InternalPlantExtParser(TokenStream input, PlantExtGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Document";	
   	}
   	
   	@Override
   	protected PlantExtGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	 iv_ruleDocument=ruleDocument 
	 { $current=$iv_ruleDocument.current; } 
	 EOF 
;

// Rule Document
ruleDocument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getDeclarationDeclarationParserRuleCall_0_0()); 
	    }
		lv_declaration_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		set(
       			$current, 
       			"declaration",
        		lv_declaration_0_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getTemplateTemplateParserRuleCall_1_0()); 
	    }
		lv_template_1_0=ruleTemplate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		add(
       			$current, 
       			"template",
        		lv_template_1_0, 
        		"Template");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getSystemSystemParserRuleCall_2_0()); 
	    }
		lv_system_2_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Declarations' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeclarationAccess().getDeclarationsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getTextTEXTParserRuleCall_1_0()); 
	    }
		lv_text_1_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='EndDeclarations' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclarationAccess().getEndDeclarationsKeyword_2());
    }
)
;





// Entry rule entryRuleTemplate
entryRuleTemplate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateRule()); }
	 iv_ruleTemplate=ruleTemplate 
	 { $current=$iv_ruleTemplate.current; } 
	 EOF 
;

// Rule Template
ruleTemplate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Template' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTemplateAccess().getTemplateKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTemplateAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemplateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getParametersParameterParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getDeclarationDeclarationParserRuleCall_3_0()); 
	    }
		lv_declaration_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		set(
       			$current, 
       			"declaration",
        		lv_declaration_3_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getStateStateParserRuleCall_4_0()); 
	    }
		lv_state_4_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"state",
        		lv_state_4_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getBranchpointBranchpointParserRuleCall_5_0()); 
	    }
		lv_branchpoint_5_0=ruleBranchpoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"branchpoint",
        		lv_branchpoint_5_0, 
        		"Branchpoint");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getTransitionTransitionParserRuleCall_6_0()); 
	    }
		lv_transition_6_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"transition",
        		lv_transition_6_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='EndTemplate' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTemplateAccess().getEndTemplateKeyword_7());
    }
)
;





// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='System' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getSystemKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getTextTEXTParserRuleCall_1_0()); 
	    }
		lv_text_1_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='EndSystem' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getEndSystemKeyword_2());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Parameters' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getParametersKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTextTEXTParserRuleCall_1_0()); 
	    }
		lv_text_1_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		add(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='EndParameters' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getEndParametersKeyword_2());
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='ini' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateAccess().getIniKeyword_0());
    }
)?(	otherlv_1='com' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateAccess().getComKeyword_1_0());
    }

    |	otherlv_2='urg' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateAccess().getUrgKeyword_1_1());
    }
)?	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateAccess().getColonKeyword_2());
    }
(
(
		lv_id_4_0=RULE_ID
		{
			newLeafNode(lv_id_4_0, grammarAccess.getStateAccess().getIdIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_4_0, 
        		"ID");
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStateAccess().getCommaKeyword_4_0());
    }
(
(
		lv_name_6_0=RULE_ID
		{
			newLeafNode(lv_name_6_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"ID");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getTextTEXTParserRuleCall_5_0()); 
	    }
		lv_text_7_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"text",
        		lv_text_7_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStateAccess().getColonKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getExponentialRateTEXTParserRuleCall_6_1_0()); 
	    }
		lv_exponentialRate_9_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"exponentialRate",
        		lv_exponentialRate_9_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStateAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleBranchpoint
entryRuleBranchpoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBranchpointRule()); }
	 iv_ruleBranchpoint=ruleBranchpoint 
	 { $current=$iv_ruleBranchpoint.current; } 
	 EOF 
;

// Rule Branchpoint
ruleBranchpoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBranchpointAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBranchpointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBranchpointAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_outBoundState_0_0=RULE_ID
		{
			newLeafNode(lv_outBoundState_0_0, grammarAccess.getTransitionAccess().getOutBoundStateIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"outBoundState",
        		lv_outBoundState_0_0, 
        		"ID");
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		lv_inboundState_2_0=RULE_ID
		{
			newLeafNode(lv_inboundState_2_0, grammarAccess.getTransitionAccess().getInboundStateIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"inboundState",
        		lv_inboundState_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getColonKeyword_3_0());
    }
(	otherlv_4='select' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getSelectKeyword_3_1_0());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getColonKeyword_3_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getSelectTEXTParserRuleCall_3_1_2_0()); 
	    }
		lv_select_6_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"select",
        		lv_select_6_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getCommaKeyword_3_2());
    }
)?(	otherlv_8='guard' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getGuardKeyword_3_3_0());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getColonKeyword_3_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getGuardTEXTParserRuleCall_3_3_2_0()); 
	    }
		lv_guard_10_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"guard",
        		lv_guard_10_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransitionAccess().getCommaKeyword_3_4());
    }
)?(	otherlv_12='sync' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTransitionAccess().getSyncKeyword_3_5_0());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTransitionAccess().getColonKeyword_3_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getSyncTEXTParserRuleCall_3_5_2_0()); 
	    }
		lv_sync_14_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"sync",
        		lv_sync_14_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTransitionAccess().getCommaKeyword_3_6());
    }
)?(	otherlv_16='assign' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTransitionAccess().getAssignKeyword_3_7_0());
    }
	otherlv_17=':' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTransitionAccess().getColonKeyword_3_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getAssignTEXTParserRuleCall_3_7_2_0()); 
	    }
		lv_assign_18_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"assign",
        		lv_assign_18_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getTransitionAccess().getCommaKeyword_3_8());
    }
)?(	otherlv_20='probability' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTransitionAccess().getProbabilityKeyword_3_9_0());
    }
	otherlv_21=':' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getTransitionAccess().getColonKeyword_3_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getProbabilityTEXTParserRuleCall_3_9_2_0()); 
	    }
		lv_probability_22_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"probability",
        		lv_probability_22_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_23=',' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTransitionAccess().getCommaKeyword_3_10());
    }
)?(	otherlv_24='comments' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getTransitionAccess().getCommentsKeyword_3_11_0());
    }
	otherlv_25=':' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTransitionAccess().getColonKeyword_3_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getCommentsTEXTParserRuleCall_3_11_2_0()); 
	    }
		lv_comments_26_0=ruleTEXT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"comments",
        		lv_comments_26_0, 
        		"TEXT");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)	otherlv_27=';' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getTransitionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTEXT
entryRuleTEXT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTEXTRule()); } 
	 iv_ruleTEXT=ruleTEXT 
	 { $current=$iv_ruleTEXT.current.getText(); }  
	 EOF 
;

// Rule TEXT
ruleTEXT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ANY_OTHER_0=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_0);
    }

    { 
    newLeafNode(this_ANY_OTHER_0, grammarAccess.getTEXTAccess().getANY_OTHERTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getTEXTAccess().getIDTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getTEXTAccess().getINTTerminalRuleCall_2()); 
    }

    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTEXTAccess().getSemicolonKeyword_3()); 
    }

    |
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTEXTAccess().getCommaKeyword_4()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


