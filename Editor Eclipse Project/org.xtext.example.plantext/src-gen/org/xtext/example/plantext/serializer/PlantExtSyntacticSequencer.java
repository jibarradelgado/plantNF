/*
 * generated by Xtext
 */
package org.xtext.example.plantext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.plantext.services.PlantExtGrammarAccess;

@SuppressWarnings("all")
public class PlantExtSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PlantExtGrammarAccess grammarAccess;
	protected AbstractElementAlias match_State_ColonKeyword_6_0_q;
	protected AbstractElementAlias match_State_IniKeyword_0_q;
	protected AbstractElementAlias match_State___ComKeyword_1_0_or_UrgKeyword_1_1__q;
	protected AbstractElementAlias match_Transition_CommaKeyword_3_10_q;
	protected AbstractElementAlias match_Transition_CommaKeyword_3_2_q;
	protected AbstractElementAlias match_Transition_CommaKeyword_3_4_q;
	protected AbstractElementAlias match_Transition_CommaKeyword_3_6_q;
	protected AbstractElementAlias match_Transition_CommaKeyword_3_8_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PlantExtGrammarAccess) access;
		match_State_ColonKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getStateAccess().getColonKeyword_6_0());
		match_State_IniKeyword_0_q = new TokenAlias(false, true, grammarAccess.getStateAccess().getIniKeyword_0());
		match_State___ComKeyword_1_0_or_UrgKeyword_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateAccess().getComKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getStateAccess().getUrgKeyword_1_1()));
		match_Transition_CommaKeyword_3_10_q = new TokenAlias(false, true, grammarAccess.getTransitionAccess().getCommaKeyword_3_10());
		match_Transition_CommaKeyword_3_2_q = new TokenAlias(false, true, grammarAccess.getTransitionAccess().getCommaKeyword_3_2());
		match_Transition_CommaKeyword_3_4_q = new TokenAlias(false, true, grammarAccess.getTransitionAccess().getCommaKeyword_3_4());
		match_Transition_CommaKeyword_3_6_q = new TokenAlias(false, true, grammarAccess.getTransitionAccess().getCommaKeyword_3_6());
		match_Transition_CommaKeyword_3_8_q = new TokenAlias(false, true, grammarAccess.getTransitionAccess().getCommaKeyword_3_8());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_State_ColonKeyword_6_0_q.equals(syntax))
				emit_State_ColonKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_State_IniKeyword_0_q.equals(syntax))
				emit_State_IniKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_State___ComKeyword_1_0_or_UrgKeyword_1_1__q.equals(syntax))
				emit_State___ComKeyword_1_0_or_UrgKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Transition_CommaKeyword_3_10_q.equals(syntax))
				emit_Transition_CommaKeyword_3_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Transition_CommaKeyword_3_2_q.equals(syntax))
				emit_Transition_CommaKeyword_3_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Transition_CommaKeyword_3_4_q.equals(syntax))
				emit_Transition_CommaKeyword_3_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Transition_CommaKeyword_3_6_q.equals(syntax))
				emit_Transition_CommaKeyword_3_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Transition_CommaKeyword_3_8_q.equals(syntax))
				emit_Transition_CommaKeyword_3_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ':'?
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) ';' (rule end)
	 *     text+=TEXT (ambiguity) ';' (rule end)
	 */
	protected void emit_State_ColonKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'ini'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('com' | 'urg')? ':' id=ID
	 */
	protected void emit_State_IniKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('com' | 'urg')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'ini'? (ambiguity) ':' id=ID
	 */
	protected void emit_State___ComKeyword_1_0_or_UrgKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     assign+=TEXT ','? (ambiguity) ';' (rule end)
	 *     assign+=TEXT ','? (ambiguity) 'comments' ':' comments+=TEXT
	 *     guard+=TEXT ','? ','? ','? (ambiguity) ';' (rule end)
	 *     guard+=TEXT ','? ','? ','? (ambiguity) 'comments' ':' comments+=TEXT
	 *     inboundState=ID ':' ','? ','? ','? ','? (ambiguity) ';' (rule end)
	 *     inboundState=ID ':' ','? ','? ','? ','? (ambiguity) 'comments' ':' comments+=TEXT
	 *     probability+=TEXT (ambiguity) ';' (rule end)
	 *     probability+=TEXT (ambiguity) 'comments' ':' comments+=TEXT
	 *     select+=TEXT ','? ','? ','? ','? (ambiguity) ';' (rule end)
	 *     select+=TEXT ','? ','? ','? ','? (ambiguity) 'comments' ':' comments+=TEXT
	 *     sync+=TEXT ','? ','? (ambiguity) ';' (rule end)
	 *     sync+=TEXT ','? ','? (ambiguity) 'comments' ':' comments+=TEXT
	 */
	protected void emit_Transition_CommaKeyword_3_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     inboundState=ID ':' (ambiguity) ','? ','? ','? ','? ';' (rule end)
	 *     inboundState=ID ':' (ambiguity) ','? ','? ','? ','? 'comments' ':' comments+=TEXT
	 *     inboundState=ID ':' (ambiguity) ','? ','? ','? 'probability' ':' probability+=TEXT
	 *     inboundState=ID ':' (ambiguity) ','? ','? 'assign' ':' assign+=TEXT
	 *     inboundState=ID ':' (ambiguity) ','? 'sync' ':' sync+=TEXT
	 *     inboundState=ID ':' (ambiguity) 'guard' ':' guard+=TEXT
	 *     select+=TEXT (ambiguity) ','? ','? ','? ','? ';' (rule end)
	 *     select+=TEXT (ambiguity) ','? ','? ','? ','? 'comments' ':' comments+=TEXT
	 *     select+=TEXT (ambiguity) ','? ','? ','? 'probability' ':' probability+=TEXT
	 *     select+=TEXT (ambiguity) ','? ','? 'assign' ':' assign+=TEXT
	 *     select+=TEXT (ambiguity) ','? 'sync' ':' sync+=TEXT
	 *     select+=TEXT (ambiguity) 'guard' ':' guard+=TEXT
	 */
	protected void emit_Transition_CommaKeyword_3_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     guard+=TEXT (ambiguity) ','? ','? ','? ';' (rule end)
	 *     guard+=TEXT (ambiguity) ','? ','? ','? 'comments' ':' comments+=TEXT
	 *     guard+=TEXT (ambiguity) ','? ','? 'probability' ':' probability+=TEXT
	 *     guard+=TEXT (ambiguity) ','? 'assign' ':' assign+=TEXT
	 *     guard+=TEXT (ambiguity) 'sync' ':' sync+=TEXT
	 *     inboundState=ID ':' ','? (ambiguity) ','? ','? ','? ';' (rule end)
	 *     inboundState=ID ':' ','? (ambiguity) ','? ','? ','? 'comments' ':' comments+=TEXT
	 *     inboundState=ID ':' ','? (ambiguity) ','? ','? 'probability' ':' probability+=TEXT
	 *     inboundState=ID ':' ','? (ambiguity) ','? 'assign' ':' assign+=TEXT
	 *     inboundState=ID ':' ','? (ambiguity) 'sync' ':' sync+=TEXT
	 *     select+=TEXT ','? (ambiguity) ','? ','? ','? ';' (rule end)
	 *     select+=TEXT ','? (ambiguity) ','? ','? ','? 'comments' ':' comments+=TEXT
	 *     select+=TEXT ','? (ambiguity) ','? ','? 'probability' ':' probability+=TEXT
	 *     select+=TEXT ','? (ambiguity) ','? 'assign' ':' assign+=TEXT
	 *     select+=TEXT ','? (ambiguity) 'sync' ':' sync+=TEXT
	 */
	protected void emit_Transition_CommaKeyword_3_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     guard+=TEXT ','? (ambiguity) ','? ','? ';' (rule end)
	 *     guard+=TEXT ','? (ambiguity) ','? ','? 'comments' ':' comments+=TEXT
	 *     guard+=TEXT ','? (ambiguity) ','? 'probability' ':' probability+=TEXT
	 *     guard+=TEXT ','? (ambiguity) 'assign' ':' assign+=TEXT
	 *     inboundState=ID ':' ','? ','? (ambiguity) ','? ','? ';' (rule end)
	 *     inboundState=ID ':' ','? ','? (ambiguity) ','? ','? 'comments' ':' comments+=TEXT
	 *     inboundState=ID ':' ','? ','? (ambiguity) ','? 'probability' ':' probability+=TEXT
	 *     inboundState=ID ':' ','? ','? (ambiguity) 'assign' ':' assign+=TEXT
	 *     select+=TEXT ','? ','? (ambiguity) ','? ','? ';' (rule end)
	 *     select+=TEXT ','? ','? (ambiguity) ','? ','? 'comments' ':' comments+=TEXT
	 *     select+=TEXT ','? ','? (ambiguity) ','? 'probability' ':' probability+=TEXT
	 *     select+=TEXT ','? ','? (ambiguity) 'assign' ':' assign+=TEXT
	 *     sync+=TEXT (ambiguity) ','? ','? ';' (rule end)
	 *     sync+=TEXT (ambiguity) ','? ','? 'comments' ':' comments+=TEXT
	 *     sync+=TEXT (ambiguity) ','? 'probability' ':' probability+=TEXT
	 *     sync+=TEXT (ambiguity) 'assign' ':' assign+=TEXT
	 */
	protected void emit_Transition_CommaKeyword_3_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     assign+=TEXT (ambiguity) ','? ';' (rule end)
	 *     assign+=TEXT (ambiguity) ','? 'comments' ':' comments+=TEXT
	 *     assign+=TEXT (ambiguity) 'probability' ':' probability+=TEXT
	 *     guard+=TEXT ','? ','? (ambiguity) ','? ';' (rule end)
	 *     guard+=TEXT ','? ','? (ambiguity) ','? 'comments' ':' comments+=TEXT
	 *     guard+=TEXT ','? ','? (ambiguity) 'probability' ':' probability+=TEXT
	 *     inboundState=ID ':' ','? ','? ','? (ambiguity) ','? ';' (rule end)
	 *     inboundState=ID ':' ','? ','? ','? (ambiguity) ','? 'comments' ':' comments+=TEXT
	 *     inboundState=ID ':' ','? ','? ','? (ambiguity) 'probability' ':' probability+=TEXT
	 *     select+=TEXT ','? ','? ','? (ambiguity) ','? ';' (rule end)
	 *     select+=TEXT ','? ','? ','? (ambiguity) ','? 'comments' ':' comments+=TEXT
	 *     select+=TEXT ','? ','? ','? (ambiguity) 'probability' ':' probability+=TEXT
	 *     sync+=TEXT ','? (ambiguity) ','? ';' (rule end)
	 *     sync+=TEXT ','? (ambiguity) ','? 'comments' ':' comments+=TEXT
	 *     sync+=TEXT ','? (ambiguity) 'probability' ':' probability+=TEXT
	 */
	protected void emit_Transition_CommaKeyword_3_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
