/*
 * generated by Xtext
 */
package org.xtext.example.plantext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.plantext.plantext.Branchpoint;
import org.xtext.example.plantext.plantext.Declaration;
import org.xtext.example.plantext.plantext.Document;
import org.xtext.example.plantext.plantext.Parameter;
import org.xtext.example.plantext.plantext.PlantextPackage;
import org.xtext.example.plantext.plantext.State;
import org.xtext.example.plantext.plantext.Template;
import org.xtext.example.plantext.plantext.Transition;
import org.xtext.example.plantext.services.PlantExtGrammarAccess;

@SuppressWarnings("all")
public class PlantExtSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PlantExtGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == PlantextPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case PlantextPackage.BRANCHPOINT:
				sequence_Branchpoint(context, (Branchpoint) semanticObject); 
				return; 
			case PlantextPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case PlantextPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case PlantextPackage.PARAMETER:
				sequence_Parameter(context, (Parameter) semanticObject); 
				return; 
			case PlantextPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case PlantextPackage.SYSTEM:
				sequence_System(context, (org.xtext.example.plantext.plantext.System) semanticObject); 
				return; 
			case PlantextPackage.TEMPLATE:
				sequence_Template(context, (Template) semanticObject); 
				return; 
			case PlantextPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Branchpoint(EObject context, Branchpoint semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PlantextPackage.Literals.BRANCHPOINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlantextPackage.Literals.BRANCHPOINT__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBranchpointAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     text+=TEXT*
	 */
	protected void sequence_Declaration(EObject context, Declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (declaration=Declaration template+=Template+ system=System)
	 */
	protected void sequence_Document(EObject context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     text+=TEXT*
	 */
	protected void sequence_Parameter(EObject context, Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID name=ID? text+=TEXT* exponentialRate+=TEXT*)
	 */
	protected void sequence_State(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     text+=TEXT*
	 */
	protected void sequence_System(EObject context, org.xtext.example.plantext.plantext.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         parameters=Parameter? 
	 *         declaration=Declaration? 
	 *         state+=State+ 
	 *         branchpoint+=Branchpoint* 
	 *         transition+=Transition+
	 *     )
	 */
	protected void sequence_Template(EObject context, Template semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         outBoundState=ID 
	 *         inboundState=ID 
	 *         select+=TEXT* 
	 *         guard+=TEXT* 
	 *         sync+=TEXT* 
	 *         assign+=TEXT* 
	 *         probability+=TEXT* 
	 *         comments+=TEXT*
	 *     )
	 */
	protected void sequence_Transition(EObject context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
